import React, { useEffect, useState, useRef } from "react";
import DashboardLayout from "@/components/DashboardLayout";
import DashboardSidebar from "@/components/DashboardSidebar";
import {
  ref,
  onValue,
  get,
  set,
  push,
  remove,
  update,
} from "firebase/database";import { database, auth } from "@/lib/firebase";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Send, Plus, Users, X, Flag } from "lucide-react";

const ADMIN_UID = "7ZWhIjcEcrS6NjlpvwqCxHv0PNg1";


// Optional: define your expected project structure
type Project = {
  id: string; // Firebase-generated ID
  name: string;
  description: string;
  assignedUsers: string[];
  createdBy: string;
  createdAt: number;
};

const Dashboard = () => {
  const { userData } = auth();

  // State for projects
  const [projects, setProjects] = useState<Project[]>([]);
  const [loadingProjects, setLoadingProjects] = useState(true);

  // State for new project form inputs
  const [newProjectName, setNewProjectName] = useState("");
  const [newProjectDesc, setNewProjectDesc] = useState("");
  const [newProjectUsers, setNewProjectUsers] = useState(""); // comma-separated emails

  // Fetch projects from Firebase on mount
  useEffect(() => {
    const projectRef = ref(database, "projects");

    const unsubscribe = onValue(projectRef, (snapshot) => {
      const data = snapshot.val() || {};

const projectsArray: (Project & { id: string })[] = [];

Object.entries(data).forEach(([id, project]) => {
  if (
    project &&
    typeof project === "object" &&
    "name" in project &&
    "description" in project &&
    "assignedUsers" in project &&
    "createdBy" in project &&
    "createdAt" in project
  ) {
    projectsArray.push({
      id,
      ...(project as Project),
    });
  }
});

      setProjects(projectsArray);
      setLoadingProjects(false);
    });

    return () => unsubscribe();
  }, []);

  // Handle new project submission
  async function handleAddProject(e: React.FormEvent) {
    e.preventDefault();

    if (!newProjectName.trim()) {
      alert("Project name is required");
      return;
    }

    const projectsRef = ref(database, "projects");
    const newProjectRef = push(projectsRef);

    const assignedUsers = newProjectUsers
      .split(",")
      .map((email) => email.trim())
      .filter(Boolean);

    await set(newProjectRef, {
      name: newProjectName,
      description: newProjectDesc,
      assignedUsers,
      createdBy: userData?.email || "unknown",
      createdAt: Date.now(),
    });

    setNewProjectName("");
    setNewProjectDesc("");
    setNewProjectUsers("");
  }

  return (
    <div className="min-h-screen bg-background flex">
      {/* Sidebar */}
      <div className="hidden md:block">
        <DashboardSidebar />
      </div>

      <div className="flex-1 w-full md:w-auto">
        <DashboardLayout>
                      {/* Friend Sidebar */}
            <Card className="w-80 flex flex-col shadow h-full">
              <CardHeader>
                <h3 className="font-semibold mb-2">Friends</h3>
                <Input
                  placeholder="Add friend by email"
                  value={friendEmail}
                  onChange={e => setFriendEmail(e.target.value)}
                />
                <Button className="mt-2 w-full" onClick={sendFriendRequest}>
                  <Plus className="w-4 h-4 mr-1" /> Add
                </Button>
              </CardHeader>

              <CardContent className="overflow-y-auto flex-1">
                <h4 className="font-semibold text-sm">Requests</h4>
                {friendRequests.map(r => (
                  <div key={r.uid} className="flex justify-between items-center my-2">
                    <span>{r.name}</span>
                    <div className="flex gap-1">
                      <Button size="sm" onClick={() => approve(r.uid)}>✓</Button>
                      <Button size="sm" variant="destructive" onClick={() => decline(r.uid)}>✕</Button>
                    </div>
                  </div>
                ))}

                <h4 className="font-semibold text-sm mt-4">Chats</h4>
                {friends.map(f => (
                  <div
                    key={f.uid}
                    onClick={() =>
                      setSelectedChat({
                        uid: f.uid,
                        name: f.name || f.email,
                        photoURL: f.photoURL || "",
                        isAnnouncement: false,
                      })
                    }
                    className={`cursor-pointer flex items-center gap-3 p-2 rounded hover:bg-gray-100 ${
                      selectedChat?.uid === f.uid && !selectedChat.isAnnouncement ? "bg-accent text-white font-bold" : ""
                    }`}
                  >
                    <Avatar className="w-8 h-8">
                      <AvatarImage src={f.photoURL || ""} />
                      <AvatarFallback>{getInitials(f.name || f.email)}</AvatarFallback>
                    </Avatar>
                    <div className="flex flex-col text-sm">
                      <span className="font-semibold">{f.name}</span>
                      <span className="text-xs text-gray-500">{f.email}</span>
                    </div>
                  </div>
                ))}

                <h4 className="font-semibold text-sm mt-4">Announcement</h4>
                <div
                  onClick={() => setSelectedChat({ isAnnouncement: true, uid: "announcement", name: "# Announcement" })}
                  className={`cursor-pointer p-2 rounded hover:bg-gray-100 ${
                    selectedChat?.isAnnouncement ? "bg-accent text-white font-bold" : ""
                  }`}
                >
                  # Announcement
                </div>
              </CardContent>
            </Card>

            {/* Chat Window */}
            <Card className="flex-1 flex flex-col shadow h-full overflow-hidden">
              <CardHeader className="flex items-center justify-between border-b">
                {selectedChat ? (
                  <div className="flex items-center gap-3">
                    <Avatar>
                      <AvatarImage src={selectedChat.photoURL || ""} />
                      <AvatarFallback>{getInitials(selectedChat.name)}</AvatarFallback>
                    </Avatar>
                    <div>
                      <h2 className="font-bold">{selectedChat.name}</h2>
                      <span className="text-xs text-gray-500">
                        {selectedChat.isAnnouncement ? "Announcement Channel" : "Private Chat"}
                      </span>
                    </div>
                  </div>
                ) : (
                  <span>Select a chat</span>
                )}
                <Badge className="ml-auto">
                  <Users className="w-3 h-3 mr-1" />
                  {messages.length}
                </Badge>
              </CardHeader>

              <CardContent className="flex-1 overflow-y-auto p-4 space-y-3">
                {messages.map(msg => {
                  const isMe = msg.sentBy === currentUser?.uid;
                  return (
                    <div key={msg.id} className={`flex gap-2 ${isMe ? "flex-row-reverse" : ""}`}>
                      <Avatar className="w-8 h-8">
                        <AvatarFallback>
                          {getInitials(isMe ? currentUser.displayName || currentUser.email : selectedChat.name)}
                        </AvatarFallback>
                      </Avatar>
                      <div className={isMe ? "text-right" : "text-left"}>
                        <div className="text-sm font-semibold">{isMe ? "You" : selectedChat.name}</div>
                        <p
                          className={`p-2 rounded-lg max-w-md ${
                            isMe ? "bg-blue-500 text-white" : "bg-gray-100 text-black"
                          }`}
                        >
                          {msg.text}
                        </p>
                      </div>
                    </div>
                  );
                })}
                <div ref={messagesEndRef} />
              </CardContent>

              {selectedChat && !(selectedChat.isAnnouncement && currentUser?.uid !== ADMIN_UID) && (
                <div className="border-t p-4">
                  <div className="flex gap-2">
                    <Input
                      value={messageText}
                      onChange={e => setMessageText(e.target.value)}
                      onKeyDown={e => e.key === "Enter" && handleSend()}
                      placeholder="Type your message..."
                    />
                    <Button onClick={handleSend} disabled={!messageText.trim()}>
                      <Send className="w-4 h-4" />
                    </Button>
                  </div>
                  <p className="text-xs text-gray-400 mt-1">
                    {dailyTotal}/50 today | {selectedChat.isAnnouncement ? "∞" : "15/chat"} | max 100 chars
                  </p>
                </div>
              )}
            </Card>
        </DashboardLayout>
      </div>
    </div>
  );
};

export default Dashboard;
